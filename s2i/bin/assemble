#!/bin/bash -e
#
# S2I assemble script for the 'my-builder' image.
# The 'assemble' script builds your application source so that it is ready to run.
#
# For more information refer to the documentation:
#	https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#

BUILD_RESULT_PATH=/opt/app-root/build_result

# If the 'my-builder' assemble script is executed with the '-h' flag, print the usage.
if [[ "$1" == "-h" ]]; then
	exec /usr/libexec/s2i/usage
fi

# Restore artifacts from the previous build (if they exist).
#
if [ "$(ls /tmp/artifacts/ 2>/dev/null)" ]; then
  echo "---> Restoring build artifacts..."
  mv /tmp/artifacts/. ./
fi

echo "---> Installing application source..."
cp -Rf /tmp/src/. ./

pwd 

echo "---> Creating $BUILD_RESULT_PATH folder ..."
mkdir -p $BUILD_RESULT_PATH 

echo "---> Setting up the JFrog CLI ..."
#jfrog rt c artifactory --url=$ART_URL --apikey=$ART_APIKEY
jfrog rt c artifactory --url=$ART_URL --user=$ART_USER --password=$ART_PASS

jfrog rt ping --server-id=artifactory

if [ $? -ne 0 ]; then
  echo "[ERROR] can't reach Artifactory via this URL : $ART_URL"
  exit 1
else
  echo "[INFO] ping OK to Artifactory ($ART_URL)"
fi

resolv_snp_repo="${RESOLV_SNP_REPO:=libs-snapshot}"
resolv_rls_repo="${RESOLV_RLS_REPO:=libs-snapshot}"
deploy_snp_repo="${RESOLV_SNP_REPO:=libs-release}"
deploy_rls_repo="${RESOLV_RLS_REPO:=libs-release}"

whoami 
pwd
ls -l ~

echo "[INFO] Initializing $JFROG_CLI_HOME_DIR/mvn_config.yml ..."
cat <<EOF > $JFROG_CLI_HOME_DIR/mvn_config.yml 
version: 1
type: maven
resolver: 
  snapshotRepo: $resolv_snp_repo 
  releaseRepo: $resolv_rls_repo 
  serverID: artifactory
deployer:
  snapshotRepo: $deploy_snp_repo 
  releaseRepo: $deploy_rls_repo 
  serverID: artifactory
EOF

mvn_cmd="${MVN_GOALS:=clean install}"
pom_xml="${POM_FILE:=.}"
deploy_rls_repo="${RESOLV_RLS_REPO:=libs-release}"
b_name="mvn-build"
b_number="1"

echo "---> Building application from source..."
jfrog rt mvn "$mvn_cmd -f $pom_xml" ${JFROG_CLI_HOME_DIR}/mvn_config.yml  --build-name=${b_name} --build-number=${b_number}

echo "---> Capturing build env ..."
jfrog rt bce ${b_name} ${b_number}

echo "---> Publishing Build Info to Artifactory"
jfrog rt bp ${b_name} ${b_number}

if [ -z $PACK_APP ]; then
  echo "---> Packing up maven artifact from maven cache..."
  cd /opt/app-root/src/.m2/repository/ && \
  tar czvf build_result.tar.gz org/ych && \
  echo "---> Moving build result to $BUILD_RESULT_PATH/"
  mv build_result.tar.gz /opt/app-root/src/target/* "$BUILD_RESULT_PATH/"
else 
  echo "---> Moving application to target folder..."
#  mv /opt/app-root/src/target/mvn-app-*.jar "$BUILD_RESULT_PATH/"
  mv /opt/app-root/src/.m2/repository/${APP_PATH:=org/springframework/gs-rest-service/0.1.1-SNAPSHOT}/${PACK_APP}.* "$BUILD_RESULT_PATH/"
#  mv /opt/app-root/src/target/${MY_APP_NAME} "$BUILD_RESULT_PATH/"
fi

